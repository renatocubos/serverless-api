service: notes-api

projectDir: ../

resources:
  Resources:
    ApiGatewayRestApi:
      Type: AWS::ApiGateway::RestApi
      Properties:
        Name: ${self:service}-${self:provider.stage}

plugins: ${file(../globalConfig.yml):plugins}

layers: ${file(../globalConfig.yml):layers}

package: ${file(../globalConfig.yml):package}

custom:
  jetpack: ${file(../globalConfig.yml):jetpack}
  scriptHooks: ${file(../globalConfig.yml):scriptHooks}

provider:
  name: aws
  runtime: nodejs14.x
  stage: ${opt:stage, 'dev'}
  lambdaHashingVersion: 20201221
  region: ${opt:region, 'us-east-1'}
  memorySize: 128
  versionFunctions: false
  timeout: 3
  iamRoleStatements:
    - Effect: Allow
      Action:
        - lambda:InvokeFunction
      Resource: "arn:aws:lambda:us-east-1:*:*"
  environment:
    STAGE: ${opt:stage, 'dev'}
    DB_DIALECT: "postgres"
    DB_NAME: "abalustre"
    DB_USERNAME: "postgres"
    DB_PASSWORD: "postgres"
    DB_HOST: "postgres"
    DB_PORT: "5432"

functions:
  create:
    handler: ./build/create.handler
    description: "create note"
    events:
      - http:
          path: /notes
          method: post
    layers:
      - { Ref: DepsLambdaLayer }

  get:
    handler: ./build/get.handler
    description: "get note"
    events:
      - http:
          path: /notes
          method: get
    layers:
      - { Ref: DepsLambdaLayer }

  update:
    handler: ./build/update.handler
    description: "update note"
    events:
      - http:
          path: /notes/{noteID}
          method: put
    layers:
      - { Ref: DepsLambdaLayer }

  delete:
    handler: ./build/delete.handler
    description: "delete note"
    events:
      - http:
          path: /notes/{noteID}
          method: delete
    layers:
      - { Ref: DepsLambdaLayer }
